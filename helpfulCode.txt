    public function getCurrentUser(Request $request)
    {
        $user = Auth::user();
        $postIds = [];
        $allUser = [];
        $allPosts = [];
        $currentUser = User::where('id',$user->id)->first();
        if($currentUser){
            $posts = Post::where('user_id', $user->id)->orderBy('updated_at', 'DESC')->get();
            if($posts){
                // get all posts ids of user
                foreach ($posts as $post) {
                    $postIds[] = $post->id;
                }

                // get all comments on all post ids
                $comments = Comment::whereIn('post_id', $postIds)->orderBy('created_at', 'ASC')->get();
                if(!empty($comments)) {
                    foreach ($comments as $comment) {
                        $allUser[] = $comment->user_id;
                    }
                    $allUser = array_unique($allUser);
                    $userNames = User::select(['id','name'])->whereIn('id', $allUser)->get();
                    $temp = [];
                    foreach ($userNames as $row) {
                        $temp[$row['id']] = $row['name'];
                    }
                    // a map for id => username
                    $userNames = $temp;


                    foreach ($comments as $comment) {
                        $comment_id = $comment['id'];
                        $post_id = $comment['post_id'];
                        $user_id = $comment['user_id'];
                        $commentText = $comment['content'];
                    }
                }

                
                foreach ($posts as $post) {
                    $commentsForPost = [];
                    foreach ($comments as $comment) {
                        if($post->id === $comment->post_id){
                            $commentsForPost[] = [
                                'id' => $comment->id,
                                'user_id' => $comment->user_id,
                                'name' => $userNames[$comment->user_id],
                                'updated_at'=> $this->formattedDate($comment->updated_at),
                                'content' => $comment->content,
                                'isEditable' => $comment->user_id == $currentUser->id ? true:false
                            ];
                        }
                    }



                    $allPosts[] = [
                        'id'  => $post->id,
                        'updated_at' => $this->formattedDate($post->updated_at) ,
                        'content' => $post->content,
                        'comments' => $commentsForPost
                    ];
                }
            }

            return response()->json(['user' => ['id' => $currentUser->id, 'name' => $currentUser->name, 'posts' => $allPosts]],200);
        }
        return response()->json(['error' => 'User Not Found'],400);
    }
